import streamlit as st
import pandas as pd
import io

# Set page title and icon
st.set_page_config(
    page_title="경비예산 Merge Tool",
    page_icon="💸"
)

# App title and description
st.title("💸 경비예산 Merge Tool")
st.markdown("왼쪽 사이드바에서 엑셀 파일을 업로드하면, 필요한 데이터를 추출하여 새로운 형식으로 변환해 드립니다.")

# Sidebar for multiple file upload and year input
st.sidebar.header("엑셀 파일 업로드")
# Allow multiple files to be uploaded
uploaded_files = st.sidebar.file_uploader(
    "여기에 파일을 끌어다 놓거나 클릭하여 여러 파일을 업로드하세요.", 
    type=["xls", "xlsx"],
    accept_multiple_files=True
)

# User input for the year
year_input = st.sidebar.text_input(
    "데이터의 년도를 입력하세요 (예: 2024)", 
    pd.Timestamp.now().year
)

if uploaded_files:
    # A list to store DataFrames from each file
    all_dfs = []

    # Process each uploaded file
    for uploaded_file in uploaded_files:
        st.subheader(f"'{uploaded_file.name}' 파일 처리 중...")
        try:
            # Read the uploaded Excel file, skipping to the 6th row for the header
            df_original = pd.read_excel(uploaded_file, header=5)

            # Convert column names to string type before removing unnamed columns
            df_original.columns = df_original.columns.astype(str)
            # Remove unnamed columns generated by pandas
            df_original = df_original.loc[:, ~df_original.columns.str.contains('^Unnamed')]

            st.dataframe(df_original)

            # Sanity check: Ensure required columns exist
            required_cols = ["비용센터코드", "계정코드"]
            if not all(col in df_original.columns for col in required_cols):
                st.error("업로드된 파일에 '비용센터코드' 또는 '계정코드' 컬럼이 없습니다. 올바른 형식의 파일을 업로드해 주세요.")
                continue  # Skip to the next file
            
            # Filter out rows where "비용센터코드" is "합 계"
            df_original = df_original[df_original['비용센터코드'] != '합 계']

            # Find all columns that are either '월' or a number from 1 to 12
            month_cols = []
            for col in df_original.columns:
                try:
                    if 1 <= int(col) <= 12:
                        month_cols.append(col)
                except ValueError:
                    if "월" in str(col):
                        month_cols.append(col)

            if not month_cols:
                st.error("엑셀 파일에서 월별 데이터를 찾을 수 없습니다. 월별 데이터 컬럼의 제목이 '1', '2' 또는 '1월', '2월' 등과 같은지 확인해 주세요.")
                continue  # Skip to the next file

            # Round the month columns to the nearest whole number and convert to integer
            # This handles the user's request to round the values "from the start".
            df_original[month_cols] = df_original[month_cols].round(0).astype(int)

            # Melt the DataFrame to long format
            df_melted = pd.melt(
                df_original,
                id_vars=["비용센터코드", "계정코드"],
                value_vars=month_cols,
                var_name="월",
                value_name="고정비금액"
            )

            # Ensure the '월' column is treated as a string before using .str accessor
            df_melted['월'] = df_melted['월'].fillna('').astype(str)
            
            # Use a custom function to extract the month number safely
            def extract_month_number(month_string):
                try:
                    digits = ''.join(filter(str.isdigit, month_string))
                    return str(int(digits)).zfill(2)
                except (ValueError, TypeError):
                    return ''

            df_melted["월_str"] = df_melted["월"].apply(extract_month_number)

            # Drop rows where '고정비금액' is NaN
            df_melted.dropna(subset=['고정비금액'], inplace=True)

            # Create the '계획년월' column in YYYYMM format
            if year_input:
                df_melted["계획년월"] = str(year_input) + df_melted["월_str"]
            else:
                st.warning("년도가 입력되지 않아 '계획년월' 컬럼을 생성할 수 없습니다.")
                df_melted["계획년월"] = ""

            # Add required columns
            df_melted["차대구분코드"] = "1"
            df_melted["원가요소코드"] = df_melted["계정코드"]

            # Select and reorder the final columns
            df_final_file = df_melted[[
                "계획년월",
                "비용센터코드",
                "차대구분코드",
                "원가요소코드",
                "고정비금액"
            ]]
            
            # Convert '원가요소코드' to integer type
            try:
                df_final_file['원가요소코드'] = df_final_file['원가요소코드'].astype(float).astype(int)
            except ValueError:
                st.error(f"'{uploaded_file.name}' 파일의 '원가요소코드'에 숫자가 아닌 값이 포함되어 있어 정수형으로 변환할 수 없습니다.")
                continue # Skip to the next file
            
            # Append the processed DataFrame to the list
            all_dfs.append(df_final_file)

        except Exception as e:
            st.error(f"'{uploaded_file.name}' 파일 처리 중 오류가 발생했습니다: {e}")
            st.info("파일 형식이나 내용이 올바른지 확인해 주세요.")

    # Concatenate all DataFrames in the list
    if all_dfs:
        df_combined = pd.concat(all_dfs, ignore_index=True)

        if not df_combined.empty:
            st.markdown("---")
            st.subheader("최종 병합된 데이터 미리보기")
            st.dataframe(df_combined)

            # Create an in-memory Excel file for download
            buffer = io.BytesIO()
            df_combined.to_excel(buffer, index=False, engine="openpyxl")
            buffer.seek(0)

            # Download button for the new Excel file
            st.download_button(
                label="결과 다운로드",
                data=buffer,
                file_name="경비예산_병합_결과.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                help="변환된 데이터를 새로운 엑셀 파일로 다운로드합니다."
            )
        else:
            st.markdown("---")
            st.info("변환할 데이터가 없습니다. 업로드한 파일에 유효한 데이터가 포함되어 있는지 확인해 주세요.")

else:
    st.info("시작하려면 왼쪽 사이드바에 엑셀 파일을 업로드하세요.")
    st.markdown("---")
    st.markdown("""
    **사용 방법:**
    1. 왼쪽 사이드바에서 '찾아보기' 버튼을 클릭하여 엑셀 파일을 선택하거나 파일을 끌어다 놓으세요. 여러 파일을 동시에 선택할 수 있습니다.
    2. 데이터에 맞는 년도를 입력하세요.
    3. 업로드가 완료되면 변환된 데이터와 다운로드 버튼이 나타납니다.
    """)
